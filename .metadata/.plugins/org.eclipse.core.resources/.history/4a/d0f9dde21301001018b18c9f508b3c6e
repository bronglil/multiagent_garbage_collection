package garbageSimulation;

import repast.simphony.context.Context;
import repast.simphony.context.space.continuous.ContinuousSpaceFactory;
import repast.simphony.context.space.continuous.ContinuousSpaceFactoryFinder;
import repast.simphony.dataLoader.ContextBuilder;
import repast.simphony.random.RandomHelper;
import repast.simphony.space.continuous.ContinuousSpace;
import repast.simphony.space.continuous.RandomCartesianAdder;

public class GarbageCollectionBuilder implements ContextBuilder<Object> {
    
    @Override
    public Context<Object> build(Context<Object> context) {
        context.setId("GarbageSimulation");
        
        // Create a continuous space for vehicle movement
        ContinuousSpaceFactory spaceFactory = 
            ContinuousSpaceFactoryFinder.createContinuousSpaceFactory(null);
        ContinuousSpace<Object> space = 
            spaceFactory.createContinuousSpace("space", context, 
                                               new RandomCartesianAdder<Object>(),
                                               new repast.simphony.space.continuous.WrapAroundBorders(),
                                               50, 50);
        
        // Create two vehicles that will communicate with each other
        Vehicle truck = new Vehicle(space, 1, "Truck", 0.7);
        Vehicle car = new Vehicle(space, 2, "Car", 1.0);
        
        // Add the vehicles to the context
        context.add(truck);
        context.add(car);
        
        // Place the vehicles in the space with some distance between them
        space.moveTo(truck, 10, 10);
        space.moveTo(car, 30, 30);
        
        return context;
    }
}